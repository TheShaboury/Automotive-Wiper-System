var DataHeading = 'Code'; var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Automotive_Wiper_System","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"D:\\Simulink_Projects\\Code_Generation\\Automotive_Wiper_System_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'Automotive_Wiper_System'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 25.1 (R2025a) 21-Nov-2024\r\n * C/C++ source code generated on : Sun Aug  3 00:25:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"Automotive_Wiper_System.h\"   /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlags[2] = { 0, 0 };\r\n\r\n  static boolean_T eventFlags[2] = { 0, 0 };/* Model has 2 rates */\r\n\r\n  static int_T taskCounter[2] = { 0, 0 };\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check base rate for overrun */\r\n  if (OverrunFlags[0]) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlags[0] = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n\r\n  /*\r\n   * For a bare-board target (i.e., no operating system), the\r\n   * following code checks whether any subrate overruns,\r\n   * and also sets the rates that need to run this time step.\r\n   */\r\n  if (taskCounter[1] == 0) {\r\n    if (eventFlags[1]) {\r\n      OverrunFlags[0] = false;\r\n      OverrunFlags[1] = true;\r\n      return;\r\n    }\r\n\r\n    eventFlags[1] = true;\r\n  }\r\n\r\n  taskCounter[1]++;\r\n  if (taskCounter[1] == 100) {\r\n    taskCounter[1]= 0;\r\n  }\r\n\r\n  /* Set model inputs associated with base rate here */\r\n\r\n  /* Step the model for base rate */\r\n  Automotive_Wiper_System_step0();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task for base rate complete */\r\n  OverrunFlags[0] = false;\r\n\r\n  /* If task 1 is running, do not run any lower priority task */\r\n  if (OverrunFlags[1]) {\r\n    return;\r\n  }\r\n\r\n  /* Step the model for subrate */\r\n  if (eventFlags[1]) {\r\n    OverrunFlags[1] = true;\r\n\r\n    /* Set model inputs associated with subrates here */\r\n\r\n    /* Step the model for subrate 1 */\r\n    Automotive_Wiper_System_step1();\r\n\r\n    /* Get model outputs here */\r\n\r\n    /* Indicate task complete for subrate */\r\n    OverrunFlags[1] = false;\r\n    eventFlags[1] = false;\r\n  }\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  Automotive_Wiper_System_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.01 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Automotive_Wiper_System.c","type":"source","group":"model","path":"D:\\Simulink_Projects\\Code_Generation\\Automotive_Wiper_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Automotive_Wiper_System.c\r\n *\r\n * Code generated for Simulink model 'Automotive_Wiper_System'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 25.1 (R2025a) 21-Nov-2024\r\n * C/C++ source code generated on : Sun Aug  3 00:25:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Automotive_Wiper_System.h\"\r\n\r\n/* Model step function for TID0 */\r\nvoid Automotive_Wiper_System_step0(void) /* Sample time: [0.01s, 0.0s] */\r\n{\r\n  /* (no output/update code required) */\r\n}\r\n\r\n/* Model step function for TID1 */\r\nvoid Automotive_Wiper_System_step1(void) /* Sample time: [1.0s, 0.0s] */\r\n{\r\n  /* (no output/update code required) */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Automotive_Wiper_System_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Automotive_Wiper_System.h","type":"header","group":"model","path":"D:\\Simulink_Projects\\Code_Generation\\Automotive_Wiper_System_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Automotive_Wiper_System.h\r\n *\r\n * Code generated for Simulink model 'Automotive_Wiper_System'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 25.1 (R2025a) 21-Nov-2024\r\n * C/C++ source code generated on : Sun Aug  3 00:25:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Automotive_Wiper_System_h_\r\n#define Automotive_Wiper_System_h_\r\n#ifndef Automotive_Wiper_System_COMMON_INCLUDES_\r\n#define Automotive_Wiper_System_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"math.h\"\r\n#endif                            /* Automotive_Wiper_System_COMMON_INCLUDES_ */\r\n\r\n/* Model entry point functions */\r\nextern void Automotive_Wiper_System_initialize(void);\r\nextern void Automotive_Wiper_System_step0(void);/* Sample time: [0.01s, 0.0s] */\r\nextern void Automotive_Wiper_System_step1(void);/* Sample time: [1.0s, 0.0s] */\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Constant1' : Unused code path elimination\r\n * Block '<Root>/Data Type Conversion' : Unused code path elimination\r\n * Block '<Root>/Data Type Conversion1' : Unused code path elimination\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n * Block '<S1>/FromWs' : Unused code path elimination\r\n * Block '<Root>/Step' : Unused code path elimination\r\n * Block '<Root>/Step1' : Unused code path elimination\r\n * Block '<S3>/AND' : Unused code path elimination\r\n * Block '<S3>/One' : Unused code path elimination\r\n * Block '<S3>/Select_WiperMode' : Unused code path elimination\r\n * Block '<S3>/Select_WiprSpdReq' : Unused code path elimination\r\n * Block '<S4>/Add' : Unused code path elimination\r\n * Block '<S4>/Saturation' : Unused code path elimination\r\n * Block '<S4>/Subtract' : Unused code path elimination\r\n * Block '<S3>/Switch' : Unused code path elimination\r\n * Block '<S3>/Unit Delay' : Unused code path elimination\r\n * Block '<S3>/Zero' : Unused code path elimination\r\n * Block '<S3>/Zero1' : Unused code path elimination\r\n * Block '<S3>/Zero10' : Unused code path elimination\r\n * Block '<S3>/Zero11' : Unused code path elimination\r\n * Block '<S3>/Zero2' : Unused code path elimination\r\n * Block '<S3>/Zero3' : Unused code path elimination\r\n * Block '<S3>/Zero4' : Unused code path elimination\r\n * Block '<S3>/Zero5' : Unused code path elimination\r\n * Block '<S3>/Zero6' : Unused code path elimination\r\n * Block '<S3>/Zero7' : Unused code path elimination\r\n * Block '<S3>/Zero8' : Unused code path elimination\r\n * Block '<S3>/Zero9' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Automotive_Wiper_System'\r\n * '<S1>'   : 'Automotive_Wiper_System/Signal Builder'\r\n * '<S2>'   : 'Automotive_Wiper_System/WiperMotor'\r\n * '<S3>'   : 'Automotive_Wiper_System/WiperMotor/Function-Call Subsystem'\r\n * '<S4>'   : 'Automotive_Wiper_System/WiperMotor/Function-Call Subsystem/Smoothing'\r\n */\r\n#endif                                 /* Automotive_Wiper_System_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\Simulink_Projects\\Code_Generation\\Automotive_Wiper_System_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Automotive_Wiper_System'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 25.1 (R2025a) 21-Nov-2024\r\n * C/C++ source code generated on : Sun Aug  3 00:25:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};